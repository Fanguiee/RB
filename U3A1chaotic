#include "nnxt.h"
#include <stdbool.h>
#include<stdlib.h>
#define N 100
#define EV_FAHREN 0
#define EV_RICHTUNG 1
#define EV_MOTOR_STOP 2
#define TIMER_1SEC 0

#define EV_TIMER 3//+
typedef uint16_t EventType;
typedef struct {
    uint32_t startTime;
    uint32_t time;
    uint32_t realTime;//how long the timer has worked
    EventType event;
}TimerType;//+

void setEvent(EventType);
bool eventIsSet(EventType);
void clearEvent(EventType);

void setTimer(TimerType *, int, EventType);
void startTimer(TimerType *);
void cancelTimer(TimerType *);
bool isTimerCanceled(TimerType *);//+

volatile uint16_t events = 0;
volatile uint16_t timer = 0;

void task1() {
    sensor_touch_clicked_t touch_l = SensorTouch_released;

    while(1) {
        Touch_Clicked(Port_3, &touch_l);
        if(touch_l == SensorTouch_clicked)
            setEvent(EV_FAHREN);
        //+
        TimerType *timer1 = malloc(sizeof(TimerType));
        setTimer(timer1, N, 1);
        startTimer(timer1);
        free(timer1);
    }
}
void task2() {
    sensor_touch_clicked_t touch_r_old, touch_r_new = SensorTouch_released;

    while(1) {
        Touch_Clicked(Port_0, &touch_r_new);
        if(touch_r_new == SensorTouch_clicked && touch_r_old == SensorTouch_released){
            setEvent(EV_RICHTUNG);
        }

        touch_r_old = touch_r_new;

        //+
        TimerType *timer2 = malloc(sizeof(TimerType));
        setTimer(timer2, N, 2);
        startTimer(timer2);
        free(timer2);
    }
}
void task3() {
    motor_dir_t motorDir = Motor_dir_forward;
    setTimer(TIMER_1SEC, 1000, EV_MOTOR_STOP);

    while(1) {
        if( eventIsSet(EV_RICHTUNG) ) {
            if(motorDir == Motor_dir_forward)
                motorDir = Motor_dir_backward;
            else
                motorDir = Motor_dir_forward;
            clearEvent(EV_RICHTUNG);
        }
        if( eventIsSet(EV_FAHREN) ) {
            Motor_Drive(Port_A, motorDir, 35);
            Motor_Drive(Port_B, motorDir, 35);
            clearEvent(EV_FAHREN);
        }
        if( eventIsSet(EV_MOTOR_STOP) ) {
            Motor_Stop(Port_A, Motor_stop_float);
            Motor_Stop(Port_B, Motor_stop_float);
            clearEvent(EV_MOTOR_STOP);
        }
        //+
        TimerType *timer3 = malloc(sizeof(TimerType));
        setTimer(timer3, N, 3);
        startTimer(timer3);
        free(timer3);
    }
}

int main(){
    SensorConfig(Port_0, SensorTouch);
    SensorConfig(Port_3, SensorTouch);
    MotorPortInit(Port_A);
    MotorPortInit(Port_B);

    CreateTask(task1);
    CreateTask(task2);
    CreateTask(task3);
    StartTask(task1);
    StartTask(task2);
    StartTask(task3);
    StartScheduler();

   	return 0;
}

void setEvent(EventType ev) {
    taskENTER_CRITICAL();
    events |= (1 << ev);
    taskEXIT_CRITICAL();
}

bool eventIsSet(EventType ev) {
    taskENTER_CRITICAL();
     if((events & (1 << ev)) != 0) {
         taskEXIT_CRITICAL();
         return true;
     } else {
         taskEXIT_CRITICAL();
         return false;
     }
};

void clearEvent(EventType ev) {
    taskENTER_CRITICAL();
    events &= ~(1 << ev);
    taskEXIT_CRITICAL();
}

void setTimer(TimerType *timer, int time, EventType ev) {
    timer->time = time;
    timer->event = ev;//what does ev do here???
}
void startTimer(TimerType *timer) {
    timer->startTime = GetSysTime();
    while(!isTimerCanceled(timer))
        ;
}
void cancelTimer(TimerType *timer) {
    isTimerCanceled(timer) = true;
}
bool isTimerCanceled(TimerType *timer) {
    timer->realTime = GetSysTime() - timer->startTime;
    if(timer->realTime >= timer->time)
        return true;
}
